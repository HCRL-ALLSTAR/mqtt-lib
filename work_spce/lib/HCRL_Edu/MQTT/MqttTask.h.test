#ifndef Mqtt_Task_H
#define Mqtt_Task_H
#include <Arduino.h>
#include "System/SystemDefaults.hpp"
#include "System/SystemMacros.hpp"
#include "MqttWrapper/MqttWrapper.h"

class MqttTask : public MqttWrapper
{
private:
    /* data */
    TaskHandle_t UpdateHandle;
    MqttWrapper wrapper;
    static void UpdateCode(void *pv);

public:
    MqttTask(/* args */);
    ~MqttTask();
    void Begin(const char *MqttServer, int MqttPort, MQTT_CALLBACK_SIGNATURE);
};

MqttTask::MqttTask(/* args */)
{
}

MqttTask::~MqttTask()
{
}

void MqttTask::Begin(const char *MqttServer, int MqttPort, MQTT_CALLBACK_SIGNATURE)
{
    this->wrapper.Begin(MqttServer, MqttPort, callback);
    xTaskCreate(this->UpdateCode, "Update Task ", Default_Task_Stack, this, 0, &UpdateHandle);
}

void MqttTask::UpdateCode(void *pv)
{
    MqttTask task = *(MqttTask *)(pv);
    for (;;)
    {
        task.wrapper.Update();
        TaskDelay(delay_Time);
    }
}

#endif